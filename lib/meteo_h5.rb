#!/usr/bin/env ruby
#
# Copyright (C) 2015-2015, Daniele Orlandi
#
# Author:: Daniele Orlandi <daniele@orlandi.com>
#
# License:: You can redistribute it and/or modify it under the terms of the LICENSE file.
#

require 'ygg/agent/base'

require 'meteo_h5/version'
require 'meteo_h5/task'

require 'serialport'


module MeteoH5

class App < Ygg::Agent::Base
  self.app_name = 'meteo_h5'
  self.app_version = VERSION
  self.task_class = Task

  def prepare_default_config
    app_config_files << File.join(File.dirname(__FILE__), '..', 'config', 'meteo_h5.conf')
    app_config_files << '/etc/yggdra/meteo_h5.conf'
  end

  def prepare_options(o)
    o.on("--debug-data", "Logs decoded data") { |v| @config['meteo_h5.debug_data'] = true }
    o.on("--debug-serial", "Logs serial lines") { |v| @config['meteo_h5.debug_serial'] = true }
    o.on("--debug-serial-raw", "Logs serial bytes") { |v| @config['meteo_h5.debug_serial_raw'] = true }

    super
  end

  class ModBus

  class Msg
    class Incomplete < StandardError ; end
    class InvalidCRC < StandardError ; end

    def initialize(**args)
      args.each { |k,v| send("#{k}=", v) }
    end

    # Calc CRC16 for massage
    def self.crc16(msg)
      crc_lo = 0xff
      crc_hi = 0xff

      msg.unpack('c*').each do |byte|
        i = crc_hi ^ byte
        crc_hi = crc_lo ^ CrcHiTable[i]
        crc_lo = CrcLoTable[i]
      end

      return ((crc_hi << 8) + crc_lo)
    end

    CrcHiTable = [
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
        0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
        0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
        0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
        0x40]
    CrcLoTable = [
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
        0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
        0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
        0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
        0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
        0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
        0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
        0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
        0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
        0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
        0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
        0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
        0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
        0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
        0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
        0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
        0x40]
  end

  class Req < Msg
    attr_accessor :address
    attr_accessor :function
    attr_accessor :range

    class Incomplete < StandardError ; end

    def to_net
      pkt = [ address, function, range.first, range.count ].pack('CCnn')
      pkt << [ self.class.crc16(pkt) ].pack('n')
      pkt
    end
  end

  class Resp < Msg
    attr_accessor :address
    attr_accessor :function
    attr_accessor :count
    attr_accessor :payload

    def self.new_from_net(data)
      raise Incomplete if data.size < 5

      (address, function, count) = data.unpack('CCC')

      # XXX TODO check address == address, function == function

      raise Incomplete if data.size < (3+count+2)
      raise "Noise?" if data.size > 3+count+2

      header = data.slice(0...3)
      payload = data.slice(3...-2)
      (crc,) = data.slice(-2..-1).unpack('n')

      raise InvalidCRC if crc != crc16(header + payload)

      new(address: address, function: function, count: count / 2, payload: payload.unpack('s>*'))
    end
  end

  end


  def agent_boot
    @amqp.ask(AM::AMQP::MsgExchangeDeclare.new(
      channel_id: @amqp_chan,
      name: mycfg.exchange,
      type: :topic,
      durable: true,
      auto_delete: false,
    )).value

    @buffer = ''

    @serialport = SerialPort.new(mycfg.serial.device,
      'baud' => mycfg.serial.speed,
      'data_bits' => 8,
      'stop_bits' => 1,
      'parity' => SerialPort::NONE)

    @actor_epoll.add(@serialport, SleepyPenguin::Epoll::IN)

    every(5.seconds) do
      @buffer = ''

      @req = ModBus::Req.new(address: mycfg.modbus_address, function: 0x03, range: (0x0000..0x0003))

      pkt = @req.to_net

      log.debug "TX: #{pkt.unpack('H*')}" if mycfg.debug_serial
      @serialport.write(pkt)
    end
  end

  def receive(events, io)
    case io
    when @serialport
      data = @serialport.read_nonblock(65536)

      log.debug "Serial Raw: #{data.unpack('H*')}" if mycfg.debug_serial_raw

      if !data || data.empty?
        @actor_epoll.del(@socket)
        actor_exit
        return
      end

      receive_data(data)
    else
      super
    end
  end

  def receive_data(data)
    @buffer << data
    resp = ModBus::Resp.new_from_net(@buffer)
    log.debug "RX: #{@buffer.unpack('H*')}" if mycfg.debug_serial

    receive_packet(resp)
  rescue ModBus::Msg::Incomplete
    nil
  else
    @buffer = ''
  end

  def receive_packet(pkt)
    @humidity = pkt.payload[0] / 10.0
    @temperature = pkt.payload[1] / 10.0
    @dewpoint = pkt.payload[2] / 10.0
    @delta_t = pkt.payload[3] / 10.0

    log.debug "T=#{@temperature}°C RH=#{@humidity}% DP=#{@dewpoint}°C DT=#{@delta_t}°C" if mycfg.debug_data

    @amqp.tell AM::AMQP::MsgPublish.new(
      channel_id: @amqp_chan,
      exchange: mycfg.exchange,
      payload: {
        station_id: mycfg.station_name,
        time: Time.now,
        data: {
          humidity: @humidity,
          temperature: @temperature,
          dewpoint: @dewpoint,
          delta_t: @delta_t,
        }
      }.to_json,
      persistent: false,
      mandatory: false,
      routing_key: mycfg.station_name,
      headers: {
        'Content-type': 'application/json',
        type: 'WX_UPDATE',
      }
    )

  end


end

end
